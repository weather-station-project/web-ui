server {
    listen 8443 ssl;
    server_name localhost;
    ssl_certificate $CERT_FILE;
    ssl_certificate_key $KEY_FILE;
    root /usr/share/nginx/html;
    index index.html;

    # Security headers
    add_header Content-Security-Policy "frame-ancestors 'none';" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    resolver $DNS_RESOLVER valid=300s;
    resolver_timeout 5s;

    location / {
        try_files $uri /index.html =404;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location /api {
        proxy_set_header Content-Type "application/json";
        proxy_pass $BACKEND_URL;
    }

    location /api/auth {
        content_by_lua_block {
            local cjson = require "cjson"
            local httpc = require("resty.http").new()

            local body_data = cjson.encode({login = "$LOGIN", password = "$PASSWORD"});
            local res, err = httpc:request_uri("$BACKEND_URL/auth", {
                method = "POST",
                body = body_data,
                headers = {
                    ["Content-Type"] = "application/json",
                },
                ssl_verify = false
            });
            if not res then
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR;
                ngx.say("Auth request failed: ", err);
                return;
            end

            ngx.status = res.status;
            ngx.header.content_type = res.headers["Content-Type"];
            ngx.say(res.body);
        }
    }

    location /socket.io {
        proxy_pass $SOCKET_URL;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }
}